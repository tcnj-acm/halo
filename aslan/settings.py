"""
Django settings for aslan project.

Generated by 'django-admin startproject' using Django 3.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""
from configurations import Configuration, pristinemethod
from pathlib import Path
from dotenv import load_dotenv
import os
import json

load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
class Base(Configuration):



    # Quick-start development settings - unsuitable for production
    # See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

    # SECURITY WARNING: keep the secret key used in production secret!
    SECRET_KEY = str(os.getenv('SECRET_KEY'))


    ALLOWED_HOSTS = json.loads(os.getenv('ALLOWED_HOSTS'))


    # Application definition

    INSTALLED_APPS = [
        'django.contrib.admin',
        'django.contrib.auth',
        'django.contrib.contenttypes',
        'django.contrib.sessions',
        'django.contrib.messages',
        'django.contrib.staticfiles',
        'qr_code',
        'default',
        'hacker',
        'organizer',
        'sponsor',
        'teams',
        'storages',


    ]

    MIDDLEWARE = [
        'django.middleware.security.SecurityMiddleware',
        'django.contrib.sessions.middleware.SessionMiddleware',
        'django.middleware.common.CommonMiddleware',
        'django.middleware.csrf.CsrfViewMiddleware',
        'django.contrib.auth.middleware.AuthenticationMiddleware',
        'django.contrib.messages.middleware.MessageMiddleware',
        'django.middleware.clickjacking.XFrameOptionsMiddleware',
        'default.loginMiddleware.loginMiddleware',
        'default.loginMiddleware.accountsMiddleware',
        'default.organizerFeatureMiddleware.OrganizerFeatureMiddleware',

    ]

    ROOT_URLCONF = 'aslan.urls'

    TEMPLATES = [
        {
            'BACKEND': 'django.template.backends.django.DjangoTemplates',
            'DIRS': [],
            'APP_DIRS': True,
            'OPTIONS': {
                'context_processors': [
                    'django.template.context_processors.debug',
                    'django.template.context_processors.request',
                    'django.contrib.auth.context_processors.auth',
                    'django.contrib.messages.context_processors.messages',
                ],
            },
        },
    ]

    AUTH_USER_MODEL = 'default.CustomUser'

    WSGI_APPLICATION = 'aslan.wsgi.application'


    # Database
    # https://docs.djangoproject.com/en/3.2/ref/settings/#databases


    # Password validation
    # https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

    AUTH_PASSWORD_VALIDATORS = [
        {
            'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
        },
        {
            'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        },
        {
            'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
        },
        {
            'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
        },
    ]


    # Internationalization
    # https://docs.djangoproject.com/en/3.2/topics/i18n/

    LANGUAGE_CODE = 'en-us'

    TIME_ZONE = 'UTC'

    USE_I18N = True

    USE_L10N = True

    USE_TZ = True


    # Default primary key field type
    # https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

    DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

    # Email stuff


    LOGIN_EXEMPT_URLS = {
        r'^$',
        r'login',
        r'register',
        r'reset',
    }

    WAITLIST_EXEMPT_URLS = {
        r'coming-soon',
        r'login',
        r'reset',
    }

    # Static files (CSS, JavaScript, Images)
    # https://docs.djangoproject.com/en/3.2/howto/static-files/
    STATIC_URL = '/static/'

    MEDIA_URL = '/images/'

    STATICFILES_DIRS = [
        BASE_DIR/'static'
    ]

    MEDIA_ROOT = BASE_DIR/'static/images'

class Dev(Base):
    DEBUG = True

    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }

    EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
    EM_HOST = 'localhost'
    EM_PORT = 1025
    EM_HOST_USER = None
    EM_HOST_PASSWORD = None
    EMAIL_OUTGOING = 'contact@localhost.com'

class Prod(Base):
    DEBUG = False

    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.mysql',
            'NAME': str(os.getenv('DB_NAME')),
            'USER': str(os.getenv('DB_USER')),
            'PASSWORD': str(os.getenv('DB_PASSWORD')),
            'HOST': str(os.getenv('DB_HOST')),
            'PORT': str(os.getenv('DB_PORT')),
        }
    }   

    # Email stuff
    EMAIL_BACKEND = os.getenv('EM_BACKEND')

    EMAIL_HOST = os.getenv('EM_HOST')
    EMAIL_PORT = os.getenv('EM_PORT')
    EMAIL_HOST_USER = os.getenv('EM_HOST_USER')
    EMAIL_HOST_PASSWORD = os.getenv('EM_HOST_PASSWORD')
    EMAIL_OUTGOING = os.getenv('EM_OUTGOING')
    EMAIL_USE_TLS=os.getenv('EM_USE_TLS')

    # AWS S3 Settings
    AWS_ACCESS_KEY_ID = os.getenv('AWS_ACCESS_KEY_ID')
    AWS_SECRET_ACCESS_KEY = os.getenv('AWS_SECRET_ACCESS_KEY')
    AWS_STORAGE_BUCKET_NAME = os.getenv('AWS_STORAGE_BUCKET_NAME')
    AWS_S3_FILE_OVERWRITE = os.getenv('AWS_S3_FILE_OVERWRITE')
    AWS_DEFAULT_ACL = None
    DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'
    STATICFILES_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'
    




# AWS S3 Settings
